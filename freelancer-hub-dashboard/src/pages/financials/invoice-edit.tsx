import React, { useState, useEffect } from "react";
import {
  Card,
  Form,
  Input,
  Select,
  Button,
  InputNumber,
  Space,
  Typography,
  Row,
  Col,
  Divider,
  Table,
  Alert,
  Spin,
  Radio,
  DatePicker,
  notification,
} from "antd";
import {
  PlusOutlined,
  DeleteOutlined,
  SaveOutlined,
  CloseOutlined,
  ProjectOutlined,
} from "@ant-design/icons";
import { useNavigate, useParams } from "react-router";
import { useIsMobile } from "../../hooks/useMediaQuery";
import { ResponsiveContainer } from "../../components/responsive";
import { Api } from "../../services/api";
import { useShow } from "@refinedev/core";
import dayjs from "dayjs";
import { getErrorMessage } from "../../utils/error";
import { useNotification } from "../../hooks/useNotification";

const { Title, Text } = Typography;
const { TextArea } = Input;

type LineItem = {
  key: string;
  description: string;
  quantity: number;
  unitPrice: number;
  isAutoGenerated?: boolean;
  projectId?: number; // Track which project generated this item
};

type TimeSummary = {
  totalHours: number;
  memberCount: number;
  memberBreakdown: Array<{
    userId: number;
    userName: string;
    hours: number;
    effectiveRate: number | null;
    projectSpecificRate: number | null;
    defaultRate: number | null;
  }>;
};

type ProjectConfig = {
  key: string;
  projectId: number;
  projectName: string;
  timeSummary: TimeSummary | null;
  loading: boolean;
};

export const InvoiceEdit: React.FC = () => {
  const isMobile = useIsMobile();
  const navigate = useNavigate();
  const { slug, id } = useParams();
  const [form] = Form.useForm();
  const { notificationApi } = useNotification();

  // Fetch existing invoice
  const { query } = useShow({
    resource: "invoices",
    id,
  });
  const { data: invoiceData, isLoading: loadingInvoice } = query;
  const invoice = invoiceData?.data;

  // State
  const [isLoading, setIsLoading] = useState(false);
  const [customers, setCustomers] = useState<any[]>([]);
  const [projects, setProjects] = useState<any[]>([]);
  const [loadingCustomers, setLoadingCustomers] = useState(false);
  const [loadingProjects, setLoadingProjects] = useState(false);
  const [selectedCustomerId, setSelectedCustomerId] = useState<number | null>(
    null
  );
  const [projectConfigs, setProjectConfigs] = useState<ProjectConfig[]>([]);
  const [lineItems, setLineItems] = useState<LineItem[]>([]);

  // New state for enhanced features
  const [dateRangeType, setDateRangeType] = useState<"predefined" | "custom">(
    "predefined"
  );
  const [taxType, setTaxType] = useState<"none" | "percentage" | "fixed">(
    "none"
  );
  const [discountType, setDiscountType] = useState<
    "none" | "percentage" | "fixed"
  >("none");
  const [taxValue, setTaxValue] = useState<number>(0);
  const [discountValue, setDiscountValue] = useState<number>(0);

  // Fetch customers and projects on mount
  useEffect(() => {
    fetchCustomers();
    fetchProjects();
  }, []);

  // Populate form with existing invoice data
  useEffect(() => {
    if (invoice && !loadingInvoice) {
      // Set customer
      form.setFieldsValue({
        customerId: invoice.customerId,
        issueDate: invoice.issueDate ? dayjs(invoice.issueDate) : dayjs(),
        dueDate: invoice.dueDate
          ? dayjs(invoice.dueDate)
          : dayjs().add(30, "day"),
        notes: invoice.notes,
      });
      setSelectedCustomerId(invoice.customerId);

      // Set line items
      if (invoice.items && invoice.items.length > 0) {
        const loadedItems = invoice.items.map((item: any, index: number) => ({
          key: `loaded-${index}`,
          description: item.description,
          quantity: Number(item.quantity),
          unitPrice: Number(item.unitPrice),
          isAutoGenerated: false,
        }));
        setLineItems(loadedItems);
      }

      // Set tax
      const taxAmt = Number(invoice.taxAmount);
      const taxRt = Number(invoice.taxRate);
      if (taxAmt > 0 && taxRt > 0) {
        setTaxType("percentage");
        setTaxValue(taxRt);
      } else if (taxAmt > 0) {
        setTaxType("fixed");
        setTaxValue(taxAmt);
      }

      // Set discount
      const discountAmt = Number(invoice.discountAmount);
      if (discountAmt > 0) {
        setDiscountType("fixed");
        setDiscountValue(discountAmt);
      }
    }
  }, [invoice, loadingInvoice]);

  // Regenerate line items when project configs change
  useEffect(() => {
    regenerateAutoLineItems();
  }, [projectConfigs]);

  const fetchCustomers = async () => {
    setLoadingCustomers(true);
    try {
      const response = await Api.getCustomers({ isActive: true });
      setCustomers(response.data.data || []);
    } catch {
      notificationApi.error({
        message: "Failed to load customers",
      });
    } finally {
      setLoadingCustomers(false);
    }
  };

  const fetchProjects = async () => {
    setLoadingProjects(true);
    try {
      const response = await Api.getProjects();
      setProjects(response.data.data || []);
    } catch {
      notificationApi.error({
        message: "Failed to load projects",
      });
    } finally {
      setLoadingProjects(false);
    }
  };

  const calculateDateRange = (duration: string) => {
    const now = dayjs();
    let startDate = now;
    const endDate = now;

    switch (duration) {
      case "1week":
        startDate = now.subtract(7, "day");
        break;
      case "2weeks":
        startDate = now.subtract(14, "day");
        break;
      case "1month":
        startDate = now.subtract(30, "day");
        break;
      case "3months":
        startDate = now.subtract(90, "day");
        break;
      case "6months":
        startDate = now.subtract(180, "day");
        break;
      case "1year":
        startDate = now.subtract(365, "day");
        break;
    }

    return {
      startDate: startDate.format("YYYY-MM-DD"),
      endDate: endDate.format("YYYY-MM-DD"),
    };
  };

  const fetchTimeSummary = async (
    projectKey: string,
    projectId: number,
    duration: string
  ) => {
    // Update loading state for this project
    setProjectConfigs((prev) =>
      prev.map((p) => (p.key === projectKey ? { ...p, loading: true } : p))
    );

    try {
      const { startDate, endDate } = calculateDateRange(duration);
      const response = await Api.getProjectTimeSummary(projectId, {
        startDate,
        endDate,
      });

      // Update project config with time summary
      setProjectConfigs((prev) =>
        prev.map((p) =>
          p.key === projectKey
            ? { ...p, timeSummary: response.data, loading: false }
            : p
        )
      );
    } catch {
      notificationApi.error({
        message: "Failed to load project time summary",
      });
      setProjectConfigs((prev) =>
        prev.map((p) =>
          p.key === projectKey ? { ...p, timeSummary: null, loading: false } : p
        )
      );
    }
  };

  const regenerateAutoLineItems = () => {
    // Generate line items from all project configs
    const allAutoItems: LineItem[] = [];

    projectConfigs.forEach((projectConfig) => {
      if (projectConfig.timeSummary) {
        projectConfig.timeSummary.memberBreakdown.forEach((member) => {
          // Use rate priority: member's effective rate > 0 fallback
          const rate = member.effectiveRate ?? 0;

          allAutoItems.push({
            key: `auto-${projectConfig.projectId}-${member.userId}`,
            description: `Work by ${member.userName} on ${projectConfig.projectName}`,
            quantity: Math.round(member.hours * 100) / 100,
            unitPrice: rate,
            isAutoGenerated: true,
            projectId: projectConfig.projectId,
          });
        });
      }
    });

    // Keep manual items, replace all auto-generated ones
    const manualItems = lineItems.filter((item) => !item.isAutoGenerated);
    setLineItems([...allAutoItems, ...manualItems]);
  };

  const handleCustomerChange = (customerId: number) => {
    setSelectedCustomerId(customerId);
    form.setFieldsValue({ customerId });
  };

  const handleAddProject = (projectId: number) => {
    const project = projects.find((p) => p.id === projectId);
    if (!project) return;

    // Check if project already added
    if (projectConfigs.some((p) => p.projectId === projectId)) {
      notificationApi.warning({
        message: "This project is already added",
      });
      return;
    }

    // Auto-fill customer if project has one
    if (project.customerId && !selectedCustomerId) {
      handleCustomerChange(project.customerId);
    }

    const newKey = `project-${Date.now()}`;
    const newConfig: ProjectConfig = {
      key: newKey,
      projectId: project.id,
      projectName: project.name,
      timeSummary: null,
      loading: false,
    };

    setProjectConfigs([...projectConfigs, newConfig]);

    // Immediately fetch time summary for the project
    const duration = form.getFieldValue("duration") || "1month";
    fetchTimeSummary(newKey, project.id, duration);
  };

  const handleRemoveProject = (projectKey: string) => {
    setProjectConfigs(projectConfigs.filter((p) => p.key !== projectKey));

    // Remove all auto-generated line items for this project
    const projectConfig = projectConfigs.find((p) => p.key === projectKey);
    if (projectConfig) {
      setLineItems(
        lineItems.filter(
          (item) =>
            !item.isAutoGenerated || item.projectId !== projectConfig.projectId
        )
      );
    }
  };

  const handleDurationChange = (duration: string) => {
    form.setFieldsValue({ duration });

    // Refetch time summaries for all projects (now that they're loaded immediately)
    projectConfigs.forEach((projectConfig) => {
      fetchTimeSummary(projectConfig.key, projectConfig.projectId, duration);
    });
  };

  const handleAddLineItem = () => {
    const newKey = `manual-${Date.now()}`;
    setLineItems([
      ...lineItems,
      {
        key: newKey,
        description: "",
        quantity: 1,
        unitPrice: 0,
        isAutoGenerated: false,
      },
    ]);
  };

  const handleRemoveLineItem = (key: string) => {
    const item = lineItems.find((i) => i.key === key);
    if (item?.isAutoGenerated) {
      notificationApi.warning({
        message:
          "Cannot remove auto-generated items. Clear project to remove all.",
      });
      return;
    }
    setLineItems(lineItems.filter((item) => item.key !== key));
  };

  const handleLineItemChange = (
    key: string,
    field: keyof LineItem,
    value: any
  ) => {
    setLineItems(
      lineItems.map((item) =>
        item.key === key ? { ...item, [field]: value } : item
      )
    );
  };

  const calculateSubtotal = () => {
    return lineItems.reduce(
      (sum, item) => sum + (item.quantity || 0) * (item.unitPrice || 0),
      0
    );
  };

  const calculateTax = () => {
    const subtotal = calculateSubtotal();
    if (taxType === "percentage") {
      return subtotal * (taxValue / 100);
    } else if (taxType === "fixed") {
      return taxValue;
    }
    return 0;
  };

  const calculateDiscount = () => {
    const subtotal = calculateSubtotal();
    if (discountType === "percentage") {
      return subtotal * (discountValue / 100);
    } else if (discountType === "fixed") {
      return discountValue;
    }
    return 0;
  };

  const calculateTotal = () => {
    const subtotal = calculateSubtotal();
    const tax = calculateTax();
    const discount = calculateDiscount();
    return subtotal + tax - discount;
  };

  const handleSubmit = async (values: any) => {
    // Validate: must have either line items OR projects
    const manualItems = lineItems.filter((item) => !item.isAutoGenerated);
    const hasProjects = projectConfigs.length > 0;
    const hasItems = lineItems.length > 0;

    if (!hasProjects && !hasItems) {
      notificationApi.error({
        message: "Please add at least one project or manual line item",
      });
      return;
    }

    // Validate manual line items if any exist
    if (manualItems.length > 0) {
      const invalidItems = manualItems.filter(
        (item) => !item.description || item.quantity <= 0 || item.unitPrice <= 0
      );

      if (invalidItems.length > 0) {
        notificationApi.error({
          message: "Please fill in all manual line items with valid data",
        });
        return;
      }
    }

    setIsLoading(true);
    try {
      const invoiceData: any = {};

      // Add manual items only if they exist
      if (manualItems.length > 0) {
        invoiceData.items = manualItems.map((item) => ({
          description: item.description,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
        }));
      }

      // Add optional fields
      if (values.customerId) {
        invoiceData.customerId = values.customerId;
      }

      // Add date range
      if (dateRangeType === "predefined" && values.duration) {
        invoiceData.duration = values.duration;
      } else if (
        dateRangeType === "custom" &&
        values.startDate &&
        values.endDate
      ) {
        invoiceData.startDate = values.startDate.format("YYYY-MM-DD");
        invoiceData.endDate = values.endDate.format("YYYY-MM-DD");
      }

      // Add projects if any configured
      if (projectConfigs.length > 0) {
        invoiceData.projectIds = projectConfigs.map((p) => ({
          projectId: p.projectId,
        }));
      }

      // Add tax
      if (taxType === "percentage") {
        invoiceData.taxRate = taxValue;
      } else if (taxType === "fixed") {
        invoiceData.taxAmount = taxValue;
      }

      // Add discount
      if (discountType === "percentage") {
        invoiceData.discountRate = discountValue;
      } else if (discountType === "fixed") {
        invoiceData.discountAmount = discountValue;
      }

      // Add invoice dates
      if (values.issueDate) {
        invoiceData.issueDate = values.issueDate.format("YYYY-MM-DD");
      }
      if (values.dueDate) {
        invoiceData.dueDate = values.dueDate.format("YYYY-MM-DD");
      }

      // Add notes
      if (values.notes) {
        invoiceData.notes = values.notes;
      }

      await Api.updateInvoice(id!, invoiceData);

      notificationApi.success({
        message: "Invoice updated successfully",
      });
      navigate(`/tenants/${slug}/financials/invoices/${id}/show`);
    } catch (error) {
      notificationApi.error({
        message: getErrorMessage(error),
      });
    } finally {
      setIsLoading(false);
    }
  };

  const lineItemColumns = [
    {
      title: "Description",
      dataIndex: "description",
      key: "description",
      width: "40%",
      render: (text: string, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>{text}</Text>
        ) : (
          <TextArea
            value={text}
            onChange={(e) =>
              handleLineItemChange(record.key, "description", e.target.value)
            }
            placeholder="Service or item description"
            autoSize={{ minRows: 1, maxRows: 3 }}
          />
        ),
    },
    {
      title: "Quantity",
      dataIndex: "quantity",
      key: "quantity",
      width: "15%",
      render: (value: number, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>{value} hours</Text>
        ) : (
          <InputNumber
            value={value}
            onChange={(val) =>
              handleLineItemChange(record.key, "quantity", val || 0)
            }
            min={1}
            style={{ width: "100%" }}
          />
        ),
    },
    {
      title: "Unit Price",
      dataIndex: "unitPrice",
      key: "unitPrice",
      width: "20%",
      render: (value: number, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>${value}/hr</Text>
        ) : (
          <InputNumber
            value={value}
            onChange={(val) =>
              handleLineItemChange(record.key, "unitPrice", val || 0)
            }
            min={0}
            step={0.01}
            formatter={(value) =>
              `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            }
            parser={(value) => Number(value!.replace(/\$\s?|(,*)/g, "")) as 0}
            style={{ width: "100%" }}
          />
        ),
    },
    {
      title: "Amount",
      key: "amount",
      width: "20%",
      render: (_: any, record: LineItem) => {
        const amount = (record.quantity || 0) * (record.unitPrice || 0);
        return (
          <Text strong>
            ${amount.toLocaleString("en-US", { minimumFractionDigits: 2 })}
          </Text>
        );
      },
    },
    {
      title: "",
      key: "action",
      width: "5%",
      render: (_: any, record: LineItem) => (
        <Button
          type="text"
          danger
          icon={<DeleteOutlined />}
          onClick={() => handleRemoveLineItem(record.key)}
          disabled={record.isAutoGenerated}
        />
      ),
    },
  ];

  const subtotal = calculateSubtotal();

  // Filter projects by selected customer
  const filteredProjects = selectedCustomerId
    ? projects.filter((p) => p.customerId === selectedCustomerId)
    : projects;

  return (
    <ResponsiveContainer maxWidth="xl">
      {loadingInvoice ? (
        <div style={{ textAlign: "center", padding: "50px" }}>
          <Spin size="large" />
        </div>
      ) : !invoice ? (
        <Alert
          message="Invoice not found"
          description="The invoice you are trying to edit does not exist or has been deleted."
          type="error"
          showIcon
        />
      ) : invoice.status !== "draft" ? (
        <Alert
          message="Cannot edit invoice"
          description="Only draft invoices can be edited. This invoice is already sent or paid."
          type="warning"
          showIcon
        />
      ) : (
        <Card
          title={
            <Space>
              <Title level={3} style={{ margin: 0 }}>
                Edit Invoice {invoice.invoiceNumber}
              </Title>
            </Space>
          }
        >
          <Form form={form} layout="vertical" onFinish={handleSubmit}>
            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item
                  label="Customer"
                  name="customerId"
                  rules={[
                    { required: true, message: "Please select a customer" },
                  ]}
                >
                  <Select
                    placeholder="Select a customer"
                    size="large"
                    loading={loadingCustomers}
                    showSearch
                    optionFilterProp="children"
                    onChange={handleCustomerChange}
                    filterOption={(input, option) =>
                      (option?.label ?? "")
                        .toLowerCase()
                        .includes(input.toLowerCase())
                    }
                    options={customers.map((customer) => ({
                      value: customer.id,
                      label: customer.company
                        ? `${customer.name} (${customer.company})`
                        : customer.name,
                    }))}
                  />
                </Form.Item>
              </Col>

              <Col xs={24} md={12}>
                <Form.Item
                  label="Date Range Type"
                  name="dateRangeType"
                  initialValue="predefined"
                >
                  <Radio.Group
                    value={dateRangeType}
                    onChange={(e) => setDateRangeType(e.target.value)}
                    size="large"
                  >
                    <Radio.Button value="predefined">Predefined</Radio.Button>
                    <Radio.Button value="custom">Custom Range</Radio.Button>
                  </Radio.Group>
                </Form.Item>
              </Col>
            </Row>

            <Row gutter={[16, 0]}>
              {dateRangeType === "predefined" ? (
                <Col xs={24} md={12}>
                  <Form.Item
                    label="Duration"
                    name="duration"
                    rules={[
                      { required: true, message: "Please select duration" },
                    ]}
                    initialValue="1month"
                  >
                    <Select size="large" onChange={handleDurationChange}>
                      <Select.Option value="1week">1 Week</Select.Option>
                      <Select.Option value="2weeks">2 Weeks</Select.Option>
                      <Select.Option value="1month">1 Month</Select.Option>
                      <Select.Option value="3months">3 Months</Select.Option>
                      <Select.Option value="6months">6 Months</Select.Option>
                      <Select.Option value="1year">1 Year</Select.Option>
                    </Select>
                  </Form.Item>
                </Col>
              ) : (
                <>
                  <Col xs={24} md={12}>
                    <Form.Item
                      label="Start Date"
                      name="startDate"
                      rules={[
                        { required: true, message: "Please select start date" },
                      ]}
                    >
                      <DatePicker size="large" style={{ width: "100%" }} />
                    </Form.Item>
                  </Col>
                  <Col xs={24} md={12}>
                    <Form.Item
                      label="End Date"
                      name="endDate"
                      rules={[
                        { required: true, message: "Please select end date" },
                      ]}
                    >
                      <DatePicker size="large" style={{ width: "100%" }} />
                    </Form.Item>
                  </Col>
                </>
              )}
            </Row>

            <Row gutter={[16, 0]}>
              <Col xs={24} md={12}>
                <Form.Item
                  label="Issue Date"
                  name="issueDate"
                  initialValue={dayjs()}
                >
                  <DatePicker size="large" style={{ width: "100%" }} />
                </Form.Item>
              </Col>
              <Col xs={24} md={12}>
                <Form.Item
                  label="Due Date"
                  name="dueDate"
                  initialValue={dayjs().add(30, "day")}
                >
                  <DatePicker size="large" style={{ width: "100%" }} />
                </Form.Item>
              </Col>
            </Row>

            <Divider>
              <Space>
                <ProjectOutlined />
                <Text>Projects (Optional)</Text>
              </Space>
            </Divider>

            {projectConfigs.length > 0 && (
              <Space
                direction="vertical"
                style={{ width: "100%", marginBottom: 16 }}
              >
                {projectConfigs.map((projectConfig) => (
                  <Card
                    key={projectConfig.key}
                    size="small"
                    title={
                      <Space>
                        <ProjectOutlined />
                        <Text strong>{projectConfig.projectName}</Text>
                      </Space>
                    }
                    extra={
                      <Button
                        type="text"
                        danger
                        size="small"
                        icon={<DeleteOutlined />}
                        onClick={() => handleRemoveProject(projectConfig.key)}
                      >
                        Remove
                      </Button>
                    }
                  >
                    <Row gutter={[16, 16]}>
                      <Col xs={24} md={24}>
                        {projectConfig.timeSummary && (
                          <Spin spinning={projectConfig.loading}>
                            <Space
                              direction="vertical"
                              style={{ width: "100%" }}
                            >
                              <Text type="secondary">Time Summary</Text>
                              <Alert
                                message={
                                  <Space
                                    direction="vertical"
                                    style={{ width: "100%" }}
                                  >
                                    {projectConfig.timeSummary.memberBreakdown.map(
                                      (member) => {
                                        const rate = member.effectiveRate ?? 0;
                                        return (
                                          <Row
                                            key={member.userId}
                                            justify="space-between"
                                          >
                                            <Col>
                                              <Space
                                                direction="vertical"
                                                size={0}
                                              >
                                                <Text>
                                                  • {member.userName}:
                                                </Text>
                                                {member.effectiveRate && (
                                                  <Text
                                                    type="secondary"
                                                    style={{ fontSize: 11 }}
                                                  >
                                                    @ ${member.effectiveRate}/hr
                                                    {member.projectSpecificRate &&
                                                      " (override)"}
                                                  </Text>
                                                )}
                                              </Space>
                                            </Col>
                                            <Col>
                                              <Space
                                                direction="vertical"
                                                size={0}
                                                align="end"
                                              >
                                                <Text strong>
                                                  {member.hours}h
                                                </Text>
                                                <Text
                                                  type="secondary"
                                                  style={{ fontSize: 11 }}
                                                >
                                                  $
                                                  {(
                                                    member.hours * rate
                                                  ).toFixed(2)}
                                                </Text>
                                              </Space>
                                            </Col>
                                          </Row>
                                        );
                                      }
                                    )}
                                    <Divider style={{ margin: "8px 0" }} />
                                    <Row justify="space-between">
                                      <Col>
                                        <Text strong>Total:</Text>
                                      </Col>
                                      <Col>
                                        <Text strong>
                                          {projectConfig.timeSummary.totalHours}
                                          h = $
                                          {projectConfig.timeSummary.memberBreakdown
                                            .reduce((sum, member) => {
                                              const rate =
                                                member.effectiveRate ?? 0;
                                              return sum + member.hours * rate;
                                            }, 0)
                                            .toLocaleString("en-US", {
                                              minimumFractionDigits: 2,
                                            })}
                                        </Text>
                                      </Col>
                                    </Row>
                                  </Space>
                                }
                                type="info"
                              />
                            </Space>
                          </Spin>
                        )}
                      </Col>
                    </Row>
                  </Card>
                ))}
              </Space>
            )}

            <Select
              placeholder="Add a project..."
              size="large"
              loading={loadingProjects}
              showSearch
              style={{ width: "100%", marginBottom: 24 }}
              optionFilterProp="children"
              value={null}
              onChange={handleAddProject}
              filterOption={(input, option) =>
                (option?.label ?? "")
                  .toLowerCase()
                  .includes(input.toLowerCase())
              }
              options={filteredProjects
                .filter(
                  (p) => !projectConfigs.some((pc) => pc.projectId === p.id)
                )
                .map((project) => ({
                  value: project.id,
                  label: project.name,
                }))}
            />

            <Divider>Line Items</Divider>

            <Table
              dataSource={lineItems}
              columns={lineItemColumns}
              pagination={false}
              size="small"
              rowKey="key"
              style={{ marginBottom: 16 }}
              locale={{
                emptyText:
                  "No line items. Add manually or select a project with hourly rate.",
              }}
            />

            <Button
              type="dashed"
              onClick={handleAddLineItem}
              icon={<PlusOutlined />}
              style={{ marginBottom: 24, width: isMobile ? "100%" : "auto" }}
            >
              Add Manual Line Item
            </Button>

            <Divider>Tax & Discount</Divider>

            <Row gutter={[16, 16]}>
              <Col xs={24} md={12}>
                <Space direction="vertical" style={{ width: "100%" }}>
                  <Text strong>Tax</Text>
                  <Radio.Group
                    value={taxType}
                    onChange={(e) => setTaxType(e.target.value)}
                    style={{ width: "100%" }}
                  >
                    <Space direction="vertical">
                      <Radio value="none">No Tax</Radio>
                      <Radio value="percentage">Percentage</Radio>
                      <Radio value="fixed">Fixed Amount</Radio>
                    </Space>
                  </Radio.Group>
                  {(taxType === "percentage" || taxType === "fixed") && (
                    <InputNumber
                      value={taxValue}
                      onChange={(value) => setTaxValue(value || 0)}
                      min={0}
                      max={taxType === "percentage" ? 100 : undefined}
                      step={taxType === "percentage" ? 0.1 : 0.01}
                      style={{ width: "100%" }}
                      formatter={(value) =>
                        taxType === "percentage"
                          ? `${value}%`
                          : `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                      }
                      parser={(value) =>
                        Number(value!.replace(/[%\$\s,]|(,*)/g, "")) as 0
                      }
                      placeholder={
                        taxType === "percentage"
                          ? "Enter tax percentage"
                          : "Enter tax amount"
                      }
                    />
                  )}
                </Space>
              </Col>
              <Col xs={24} md={12}>
                <Space direction="vertical" style={{ width: "100%" }}>
                  <Text strong>Discount</Text>
                  <Radio.Group
                    value={discountType}
                    onChange={(e) => setDiscountType(e.target.value)}
                    style={{ width: "100%" }}
                  >
                    <Space direction="vertical">
                      <Radio value="none">No Discount</Radio>
                      <Radio value="percentage">Percentage</Radio>
                      <Radio value="fixed">Fixed Amount</Radio>
                    </Space>
                  </Radio.Group>
                  {(discountType === "percentage" ||
                    discountType === "fixed") && (
                    <InputNumber
                      value={discountValue}
                      onChange={(value) => setDiscountValue(value || 0)}
                      min={0}
                      max={discountType === "percentage" ? 100 : undefined}
                      step={discountType === "percentage" ? 0.1 : 0.01}
                      style={{ width: "100%" }}
                      formatter={(value) =>
                        discountType === "percentage"
                          ? `${value}%`
                          : `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                      }
                      parser={(value) =>
                        Number(value!.replace(/[%\$\s,]|(,*)/g, "")) as 0
                      }
                      placeholder={
                        discountType === "percentage"
                          ? "Enter discount percentage"
                          : "Enter discount amount"
                      }
                    />
                  )}
                </Space>
              </Col>
            </Row>

            <Divider />

            <Form.Item label="Notes" name="notes">
              <TextArea
                rows={3}
                placeholder="Additional notes for the invoice (optional)"
              />
            </Form.Item>

            <Divider />

            <Row justify="end" style={{ marginBottom: 24 }}>
              <Col xs={24} md={8}>
                <Space
                  direction="vertical"
                  style={{ width: "100%" }}
                  size="small"
                >
                  <Row justify="space-between">
                    <Col>
                      <Text strong>Subtotal:</Text>
                    </Col>
                    <Col>
                      <Text strong style={{ fontSize: 16 }}>
                        $
                        {calculateSubtotal().toLocaleString("en-US", {
                          minimumFractionDigits: 2,
                        })}
                      </Text>
                    </Col>
                  </Row>
                  {taxType !== "none" && (
                    <Row justify="space-between">
                      <Col>
                        <Text>Tax:</Text>
                      </Col>
                      <Col>
                        <Text>
                          $
                          {calculateTax().toLocaleString("en-US", {
                            minimumFractionDigits: 2,
                          })}
                        </Text>
                      </Col>
                    </Row>
                  )}
                  {discountType !== "none" && (
                    <Row justify="space-between">
                      <Col>
                        <Text>Discount:</Text>
                      </Col>
                      <Col>
                        <Text style={{ color: "#52c41a" }}>
                          -$
                          {calculateDiscount().toLocaleString("en-US", {
                            minimumFractionDigits: 2,
                          })}
                        </Text>
                      </Col>
                    </Row>
                  )}
                  <Divider style={{ margin: "8px 0" }} />
                  <Row justify="space-between">
                    <Col>
                      <Title level={4} style={{ margin: 0 }}>
                        Total:
                      </Title>
                    </Col>
                    <Col>
                      <Title level={4} style={{ margin: 0 }}>
                        $
                        {calculateTotal().toLocaleString("en-US", {
                          minimumFractionDigits: 2,
                        })}
                      </Title>
                    </Col>
                  </Row>
                </Space>
              </Col>
            </Row>

            <Form.Item>
              <Space
                direction={isMobile ? "vertical" : "horizontal"}
                style={{ width: isMobile ? "100%" : "auto" }}
              >
                <Button
                  type="primary"
                  htmlType="submit"
                  icon={<SaveOutlined />}
                  loading={isLoading}
                  size="large"
                  block={isMobile}
                >
                  Update Invoice
                </Button>
                <Button
                  icon={<CloseOutlined />}
                  onClick={() =>
                    navigate(`/tenants/${slug}/financials/invoices/${id}/show`)
                  }
                  size="large"
                  block={isMobile}
                >
                  Cancel
                </Button>
              </Space>
            </Form.Item>
          </Form>
        </Card>
      )}
    </ResponsiveContainer>
  );
};
