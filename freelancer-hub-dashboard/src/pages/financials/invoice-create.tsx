import React, { useState, useEffect } from "react";
import {
  Card,
  Form,
  Input,
  Select,
  Button,
  InputNumber,
  Space,
  Typography,
  Row,
  Col,
  Divider,
  Table,
  message,
  Alert,
  Spin,
} from "antd";
import {
  PlusOutlined,
  DeleteOutlined,
  SaveOutlined,
  CloseOutlined,
  ProjectOutlined,
  ClockCircleOutlined,
} from "@ant-design/icons";
import { useNavigate, useParams } from "react-router";
import { useIsMobile } from "../../hooks/useMediaQuery";
import { ResponsiveContainer } from "../../components/responsive";
import { Api } from "../../services/api";
import dayjs from "dayjs";

const { Title, Text } = Typography;
const { TextArea } = Input;

type LineItem = {
  key: string;
  description: string;
  quantity: number;
  unitPrice: number;
  isAutoGenerated?: boolean;
};

type TimeSummary = {
  totalHours: number;
  memberCount: number;
  memberBreakdown: Array<{
    userId: number;
    userName: string;
    hours: number;
  }>;
};

export const InvoiceCreate: React.FC = () => {
  const isMobile = useIsMobile();
  const navigate = useNavigate();
  const { slug } = useParams();
  const [form] = Form.useForm();

  // State
  const [isLoading, setIsLoading] = useState(false);
  const [customers, setCustomers] = useState<any[]>([]);
  const [projects, setProjects] = useState<any[]>([]);
  const [loadingCustomers, setLoadingCustomers] = useState(false);
  const [loadingProjects, setLoadingProjects] = useState(false);
  const [loadingTimeSummary, setLoadingTimeSummary] = useState(false);
  const [selectedCustomerId, setSelectedCustomerId] = useState<number | null>(
    null
  );
  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(
    null
  );
  const [timeSummary, setTimeSummary] = useState<TimeSummary | null>(null);
  const [lineItems, setLineItems] = useState<LineItem[]>([]);

  // Fetch customers and projects on mount
  useEffect(() => {
    fetchCustomers();
    fetchProjects();
  }, []);

  // Fetch time summary when project or duration changes
  useEffect(() => {
    if (selectedProjectId) {
      const duration = form.getFieldValue("duration");
      if (duration) {
        fetchTimeSummary(selectedProjectId, duration);
      }
    }
  }, [selectedProjectId, form.getFieldValue("duration")]);

  const fetchCustomers = async () => {
    setLoadingCustomers(true);
    try {
      const response = await Api.getCustomers({ isActive: true });
      setCustomers(response.data.data || []);
    } catch (error) {
      console.error("Failed to fetch customers:", error);
      message.error("Failed to load customers");
    } finally {
      setLoadingCustomers(false);
    }
  };

  const fetchProjects = async () => {
    setLoadingProjects(true);
    try {
      const response = await Api.getProjects();
      setProjects(response.data.data || []);
    } catch (error) {
      console.error("Failed to fetch projects:", error);
      message.error("Failed to load projects");
    } finally {
      setLoadingProjects(false);
    }
  };

  const calculateDateRange = (duration: string) => {
    const now = dayjs();
    let startDate = now;
    let endDate = now;

    switch (duration) {
      case "1week":
        endDate = now.add(7, "day");
        break;
      case "2weeks":
        endDate = now.add(14, "day");
        break;
      case "1month":
        endDate = now.add(30, "day");
        break;
    }

    return {
      startDate: startDate.format("YYYY-MM-DD"),
      endDate: endDate.format("YYYY-MM-DD"),
    };
  };

  const fetchTimeSummary = async (projectId: number, duration: string) => {
    setLoadingTimeSummary(true);
    try {
      const { startDate, endDate } = calculateDateRange(duration);
      const response = await Api.getProjectTimeSummary(projectId, {
        startDate,
        endDate,
      });
      setTimeSummary(response.data);

      // Auto-generate line items from time summary
      const hourlyRate = form.getFieldValue("hourlyRate") || 0;
      if (hourlyRate > 0 && response.data.memberBreakdown) {
        const autoItems: LineItem[] = response.data.memberBreakdown.map(
          (member: any, index: number) => ({
            key: `auto-${index}`,
            description: `Work by ${member.userName}`,
            quantity: Math.round(member.hours * 100) / 100,
            unitPrice: hourlyRate,
            isAutoGenerated: true,
          })
        );
        // Keep existing manual items, replace auto-generated ones
        const manualItems = lineItems.filter((item) => !item.isAutoGenerated);
        setLineItems([...autoItems, ...manualItems]);
      }
    } catch (error) {
      console.error("Failed to fetch time summary:", error);
      message.error("Failed to load project time summary");
      setTimeSummary(null);
    } finally {
      setLoadingTimeSummary(false);
    }
  };

  const handleCustomerChange = (customerId: number) => {
    setSelectedCustomerId(customerId);
    form.setFieldsValue({ customerId });

    // Update customer email in toEmail field
    const customer = customers.find((c) => c.id === customerId);
    if (customer && customer.email) {
      form.setFieldsValue({ toEmail: customer.email });
    }
  };

  const handleProjectChange = (projectId: number) => {
    setSelectedProjectId(projectId);
    form.setFieldsValue({ projectId });

    // Find project and auto-fill customer if project has one
    const project = projects.find((p) => p.id === projectId);
    if (project && project.customerId) {
      handleCustomerChange(project.customerId);
    }

    // Fetch time summary with current duration
    const duration = form.getFieldValue("duration") || "1month";
    fetchTimeSummary(projectId, duration);
  };

  const handleDurationChange = (duration: string) => {
    form.setFieldsValue({ duration });
    if (selectedProjectId) {
      fetchTimeSummary(selectedProjectId, duration);
    }
  };

  const handleHourlyRateChange = (rate: number | null) => {
    if (!rate || !timeSummary) return;

    // Regenerate auto line items with new rate
    const autoItems: LineItem[] = timeSummary.memberBreakdown.map(
      (member, index) => ({
        key: `auto-${index}`,
        description: `Work by ${member.userName}`,
        quantity: Math.round(member.hours * 100) / 100,
        unitPrice: rate,
        isAutoGenerated: true,
      })
    );

    // Keep manual items
    const manualItems = lineItems.filter((item) => !item.isAutoGenerated);
    setLineItems([...autoItems, ...manualItems]);
  };

  const handleAddLineItem = () => {
    const newKey = `manual-${Date.now()}`;
    setLineItems([
      ...lineItems,
      {
        key: newKey,
        description: "",
        quantity: 1,
        unitPrice: 0,
        isAutoGenerated: false,
      },
    ]);
  };

  const handleRemoveLineItem = (key: string) => {
    const item = lineItems.find((i) => i.key === key);
    if (item?.isAutoGenerated) {
      message.warning(
        "Cannot remove auto-generated items. Clear project to remove all."
      );
      return;
    }
    setLineItems(lineItems.filter((item) => item.key !== key));
  };

  const handleLineItemChange = (
    key: string,
    field: keyof LineItem,
    value: any
  ) => {
    setLineItems(
      lineItems.map((item) =>
        item.key === key ? { ...item, [field]: value } : item
      )
    );
  };

  const calculateSubtotal = () => {
    return lineItems.reduce(
      (sum, item) => sum + (item.quantity || 0) * (item.unitPrice || 0),
      0
    );
  };

  const handleSubmit = async (values: any) => {
    // Validate: must have either line items OR project with hourly rate
    const manualItems = lineItems.filter((item) => !item.isAutoGenerated);
    const autoItems = lineItems.filter((item) => item.isAutoGenerated);

    if (lineItems.length === 0) {
      message.error("Please add at least one line item or select a project");
      return;
    }

    // Validate manual line items
    const invalidItems = manualItems.filter(
      (item) =>
        !item.description || item.quantity <= 0 || item.unitPrice <= 0
    );

    if (invalidItems.length > 0) {
      message.error(
        "Please fill in all manual line items with valid data"
      );
      return;
    }

    setIsLoading(true);
    try {
      const invoiceData: any = {
        duration: values.duration,
        items: manualItems.map((item) => ({
          description: item.description,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
        })),
      };

      // Add optional fields
      if (values.customerId) {
        invoiceData.customerId = values.customerId;
      }
      if (values.projectId) {
        invoiceData.projectId = values.projectId;
      }
      if (values.hourlyRate) {
        invoiceData.hourlyRate = values.hourlyRate;
      }
      if (values.toEmail) {
        invoiceData.toEmail = values.toEmail;
      }

      await Api.createInvoice(invoiceData);

      message.success("Invoice created successfully");
      navigate(`/tenants/${slug}/invoices`);
    } catch (error: any) {
      console.error("Failed to create invoice:", error);
      message.error(
        error.response?.data?.message || "Failed to create invoice"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const lineItemColumns = [
    {
      title: "Description",
      dataIndex: "description",
      key: "description",
      width: "40%",
      render: (text: string, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>{text}</Text>
        ) : (
          <TextArea
            value={text}
            onChange={(e) =>
              handleLineItemChange(record.key, "description", e.target.value)
            }
            placeholder="Service or item description"
            autoSize={{ minRows: 1, maxRows: 3 }}
          />
        ),
    },
    {
      title: "Quantity",
      dataIndex: "quantity",
      key: "quantity",
      width: "15%",
      render: (value: number, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>{value} hours</Text>
        ) : (
          <InputNumber
            value={value}
            onChange={(val) =>
              handleLineItemChange(record.key, "quantity", val || 0)
            }
            min={1}
            style={{ width: "100%" }}
          />
        ),
    },
    {
      title: "Unit Price",
      dataIndex: "unitPrice",
      key: "unitPrice",
      width: "20%",
      render: (value: number, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>${value}/hr</Text>
        ) : (
          <InputNumber
            value={value}
            onChange={(val) =>
              handleLineItemChange(record.key, "unitPrice", val || 0)
            }
            min={0}
            step={0.01}
            formatter={(value) =>
              `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            }
            parser={(value) =>
              Number(value!.replace(/\$\s?|(,*)/g, "")) as 0
            }
            style={{ width: "100%" }}
          />
        ),
    },
    {
      title: "Amount",
      key: "amount",
      width: "20%",
      render: (_: any, record: LineItem) => {
        const amount = (record.quantity || 0) * (record.unitPrice || 0);
        return (
          <Text strong>
            ${amount.toLocaleString("en-US", { minimumFractionDigits: 2 })}
          </Text>
        );
      },
    },
    {
      title: "",
      key: "action",
      width: "5%",
      render: (_: any, record: LineItem) => (
        <Button
          type="text"
          danger
          icon={<DeleteOutlined />}
          onClick={() => handleRemoveLineItem(record.key)}
          disabled={record.isAutoGenerated}
        />
      ),
    },
  ];

  const subtotal = calculateSubtotal();

  // Filter projects by selected customer
  const filteredProjects = selectedCustomerId
    ? projects.filter((p) => p.customerId === selectedCustomerId)
    : projects;

  return (
    <ResponsiveContainer maxWidth="xl">
      <Card
        title={
          <Space>
            <Title level={3} style={{ margin: 0 }}>
              Create New Invoice
            </Title>
          </Space>
        }
      >
        <Form form={form} layout="vertical" onFinish={handleSubmit}>
          <Row gutter={[16, 0]}>
            <Col xs={24} md={8}>
              <Form.Item
                label="Customer"
                name="customerId"
                rules={[
                  { required: true, message: "Please select a customer" },
                ]}
              >
                <Select
                  placeholder="Select a customer"
                  size="large"
                  loading={loadingCustomers}
                  showSearch
                  optionFilterProp="children"
                  onChange={handleCustomerChange}
                  filterOption={(input, option) =>
                    (option?.label ?? "")
                      .toLowerCase()
                      .includes(input.toLowerCase())
                  }
                  options={customers.map((customer) => ({
                    value: customer.id,
                    label: customer.company
                      ? `${customer.name} (${customer.company})`
                      : customer.name,
                  }))}
                />
              </Form.Item>
            </Col>

            <Col xs={24} md={8}>
              <Form.Item label="Project (Optional)" name="projectId">
                <Select
                  placeholder="Select a project"
                  size="large"
                  loading={loadingProjects}
                  showSearch
                  allowClear
                  optionFilterProp="children"
                  onChange={handleProjectChange}
                  filterOption={(input, option) =>
                    (option?.label ?? "")
                      .toLowerCase()
                      .includes(input.toLowerCase())
                  }
                  options={filteredProjects.map((project) => ({
                    value: project.id,
                    label: project.name,
                  }))}
                />
              </Form.Item>
            </Col>

            <Col xs={24} md={8}>
              <Form.Item
                label="Duration"
                name="duration"
                rules={[{ required: true, message: "Please select duration" }]}
                initialValue="1month"
              >
                <Select size="large" onChange={handleDurationChange}>
                  <Select.Option value="1week">1 Week</Select.Option>
                  <Select.Option value="2weeks">2 Weeks</Select.Option>
                  <Select.Option value="1month">1 Month</Select.Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={[16, 0]}>
            <Col xs={24} md={12}>
              <Form.Item label="Hourly Rate (for project time)" name="hourlyRate">
                <InputNumber
                  placeholder="Enter hourly rate"
                  size="large"
                  min={0}
                  step={0.01}
                  style={{ width: "100%" }}
                  onChange={handleHourlyRateChange}
                  formatter={(value) =>
                    `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                  }
                  parser={(value) =>
                    Number(value!.replace(/\$\s?|(,*)/g, "")) as 0
                  }
                  disabled={!selectedProjectId}
                />
              </Form.Item>
            </Col>

            <Col xs={24} md={12}>
              <Form.Item label="To Email" name="toEmail">
                <Input
                  placeholder="recipient@example.com"
                  size="large"
                  type="email"
                />
              </Form.Item>
            </Col>
          </Row>

          {timeSummary && (
            <>
              <Divider>
                <Space>
                  <ClockCircleOutlined />
                  <Text>Time Summary from Project</Text>
                </Space>
              </Divider>
              <Spin spinning={loadingTimeSummary}>
                <Alert
                  message={
                    <Space direction="vertical" style={{ width: "100%" }}>
                      {timeSummary.memberBreakdown.map((member) => (
                        <Row key={member.userId} justify="space-between">
                          <Col>
                            <Text>• {member.userName}:</Text>
                          </Col>
                          <Col>
                            <Text strong>{member.hours} hours</Text>
                          </Col>
                        </Row>
                      ))}
                      <Divider style={{ margin: "8px 0" }} />
                      <Row justify="space-between">
                        <Col>
                          <Text strong>Total:</Text>
                        </Col>
                        <Col>
                          <Text strong style={{ fontSize: 16 }}>
                            {timeSummary.totalHours} hours
                            {form.getFieldValue("hourlyRate") && (
                              <> = $
                                {(
                                  timeSummary.totalHours *
                                  form.getFieldValue("hourlyRate")
                                ).toLocaleString("en-US", {
                                  minimumFractionDigits: 2,
                                })}
                              </>
                            )}
                          </Text>
                        </Col>
                      </Row>
                    </Space>
                  }
                  type="info"
                  style={{ marginBottom: 24 }}
                />
              </Spin>
            </>
          )}

          <Divider>Line Items</Divider>

          <Table
            dataSource={lineItems}
            columns={lineItemColumns}
            pagination={false}
            size="small"
            rowKey="key"
            style={{ marginBottom: 16 }}
            locale={{
              emptyText: "No line items. Add manually or select a project with hourly rate.",
            }}
          />

          <Button
            type="dashed"
            onClick={handleAddLineItem}
            icon={<PlusOutlined />}
            style={{ marginBottom: 24, width: isMobile ? "100%" : "auto" }}
          >
            Add Manual Line Item
          </Button>

          <Divider />

          <Row justify="end" style={{ marginBottom: 24 }}>
            <Col xs={24} md={8}>
              <Space
                direction="vertical"
                style={{ width: "100%" }}
                size="small"
              >
                <Row justify="space-between">
                  <Col>
                    <Text strong>Subtotal:</Text>
                  </Col>
                  <Col>
                    <Text strong style={{ fontSize: 16 }}>
                      $
                      {subtotal.toLocaleString("en-US", {
                        minimumFractionDigits: 2,
                      })}
                    </Text>
                  </Col>
                </Row>
                <Row justify="space-between">
                  <Col>
                    <Text>Tax:</Text>
                  </Col>
                  <Col>
                    <Text>$0.00</Text>
                  </Col>
                </Row>
                <Divider style={{ margin: "8px 0" }} />
                <Row justify="space-between">
                  <Col>
                    <Title level={4} style={{ margin: 0 }}>
                      Total:
                    </Title>
                  </Col>
                  <Col>
                    <Title level={4} style={{ margin: 0 }}>
                      $
                      {subtotal.toLocaleString("en-US", {
                        minimumFractionDigits: 2,
                      })}
                    </Title>
                  </Col>
                </Row>
              </Space>
            </Col>
          </Row>

          <Form.Item>
            <Space
              direction={isMobile ? "vertical" : "horizontal"}
              style={{ width: isMobile ? "100%" : "auto" }}
            >
              <Button
                type="primary"
                htmlType="submit"
                icon={<SaveOutlined />}
                loading={isLoading}
                size="large"
                block={isMobile}
              >
                Create Invoice
              </Button>
              <Button
                icon={<CloseOutlined />}
                onClick={() => navigate(`/tenants/${slug}/invoices`)}
                size="large"
                block={isMobile}
              >
                Cancel
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Card>
    </ResponsiveContainer>
  );
};
