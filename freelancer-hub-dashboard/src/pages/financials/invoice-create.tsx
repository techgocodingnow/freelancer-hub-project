import React, { useState, useEffect } from "react";
import {
  Card,
  Form,
  Input,
  Select,
  Button,
  InputNumber,
  Space,
  Typography,
  Row,
  Col,
  Divider,
  Table,
  message,
  Alert,
  Spin,
} from "antd";
import {
  PlusOutlined,
  DeleteOutlined,
  SaveOutlined,
  CloseOutlined,
  ProjectOutlined,
  ClockCircleOutlined,
} from "@ant-design/icons";
import { useNavigate, useParams } from "react-router";
import { useIsMobile } from "../../hooks/useMediaQuery";
import { ResponsiveContainer } from "../../components/responsive";
import { Api } from "../../services/api";
import dayjs from "dayjs";

const { Title, Text } = Typography;
const { TextArea } = Input;

type LineItem = {
  key: string;
  description: string;
  quantity: number;
  unitPrice: number;
  isAutoGenerated?: boolean;
  projectId?: number; // Track which project generated this item
};

type TimeSummary = {
  totalHours: number;
  memberCount: number;
  memberBreakdown: Array<{
    userId: number;
    userName: string;
    hours: number;
    effectiveRate: number | null;
    projectSpecificRate: number | null;
    defaultRate: number | null;
  }>;
};

type ProjectConfig = {
  key: string;
  projectId: number;
  projectName: string;
  hourlyRate: number;
  timeSummary: TimeSummary | null;
  loading: boolean;
};

export const InvoiceCreate: React.FC = () => {
  const isMobile = useIsMobile();
  const navigate = useNavigate();
  const { slug } = useParams();
  const [form] = Form.useForm();

  // State
  const [isLoading, setIsLoading] = useState(false);
  const [customers, setCustomers] = useState<any[]>([]);
  const [projects, setProjects] = useState<any[]>([]);
  const [loadingCustomers, setLoadingCustomers] = useState(false);
  const [loadingProjects, setLoadingProjects] = useState(false);
  const [selectedCustomerId, setSelectedCustomerId] = useState<number | null>(
    null
  );
  const [projectConfigs, setProjectConfigs] = useState<ProjectConfig[]>([]);
  const [lineItems, setLineItems] = useState<LineItem[]>([]);

  // Fetch customers and projects on mount
  useEffect(() => {
    fetchCustomers();
    fetchProjects();
  }, []);

  // Regenerate line items when project configs change
  useEffect(() => {
    regenerateAutoLineItems();
  }, [projectConfigs]);

  const fetchCustomers = async () => {
    setLoadingCustomers(true);
    try {
      const response = await Api.getCustomers({ isActive: true });
      setCustomers(response.data.data || []);
    } catch (error) {
      console.error("Failed to fetch customers:", error);
      message.error("Failed to load customers");
    } finally {
      setLoadingCustomers(false);
    }
  };

  const fetchProjects = async () => {
    setLoadingProjects(true);
    try {
      const response = await Api.getProjects();
      setProjects(response.data.data || []);
    } catch (error) {
      console.error("Failed to fetch projects:", error);
      message.error("Failed to load projects");
    } finally {
      setLoadingProjects(false);
    }
  };

  const calculateDateRange = (duration: string) => {
    const now = dayjs();
    let startDate = now;
    let endDate = now;

    switch (duration) {
      case "1week":
        endDate = now.add(7, "day");
        break;
      case "2weeks":
        endDate = now.add(14, "day");
        break;
      case "1month":
        endDate = now.add(30, "day");
        break;
    }

    return {
      startDate: startDate.format("YYYY-MM-DD"),
      endDate: endDate.format("YYYY-MM-DD"),
    };
  };

  const fetchTimeSummary = async (
    projectKey: string,
    projectId: number,
    duration: string
  ) => {
    // Update loading state for this project
    setProjectConfigs((prev) =>
      prev.map((p) => (p.key === projectKey ? { ...p, loading: true } : p))
    );

    try {
      const { startDate, endDate } = calculateDateRange(duration);
      const response = await Api.getProjectTimeSummary(projectId, {
        startDate,
        endDate,
      });

      // Update project config with time summary
      setProjectConfigs((prev) =>
        prev.map((p) =>
          p.key === projectKey
            ? { ...p, timeSummary: response.data, loading: false }
            : p
        )
      );
    } catch (error) {
      console.error("Failed to fetch time summary:", error);
      message.error("Failed to load project time summary");
      setProjectConfigs((prev) =>
        prev.map((p) =>
          p.key === projectKey
            ? { ...p, timeSummary: null, loading: false }
            : p
        )
      );
    }
  };

  const regenerateAutoLineItems = () => {
    // Generate line items from all project configs
    const allAutoItems: LineItem[] = [];

    projectConfigs.forEach((projectConfig) => {
      if (projectConfig.timeSummary) {
        projectConfig.timeSummary.memberBreakdown.forEach((member) => {
          // Use rate priority: member's effective rate > project hourly rate
          const rate = member.effectiveRate ?? projectConfig.hourlyRate;

          allAutoItems.push({
            key: `auto-${projectConfig.projectId}-${member.userId}`,
            description: `Work by ${member.userName} on ${projectConfig.projectName}`,
            quantity: Math.round(member.hours * 100) / 100,
            unitPrice: rate,
            isAutoGenerated: true,
            projectId: projectConfig.projectId,
          });
        });
      }
    });

    // Keep manual items, replace all auto-generated ones
    const manualItems = lineItems.filter((item) => !item.isAutoGenerated);
    setLineItems([...allAutoItems, ...manualItems]);
  };

  const handleCustomerChange = (customerId: number) => {
    setSelectedCustomerId(customerId);
    form.setFieldsValue({ customerId });
  };

  const handleAddProject = (projectId: number) => {
    const project = projects.find((p) => p.id === projectId);
    if (!project) return;

    // Check if project already added
    if (projectConfigs.some((p) => p.projectId === projectId)) {
      message.warning("This project is already added");
      return;
    }

    // Auto-fill customer if project has one
    if (project.customerId && !selectedCustomerId) {
      handleCustomerChange(project.customerId);
    }

    const newConfig: ProjectConfig = {
      key: `project-${Date.now()}`,
      projectId: project.id,
      projectName: project.name,
      hourlyRate: 0,
      timeSummary: null,
      loading: false,
    };

    setProjectConfigs([...projectConfigs, newConfig]);
  };

  const handleRemoveProject = (projectKey: string) => {
    setProjectConfigs(projectConfigs.filter((p) => p.key !== projectKey));

    // Remove all auto-generated line items for this project
    const projectConfig = projectConfigs.find((p) => p.key === projectKey);
    if (projectConfig) {
      setLineItems(
        lineItems.filter(
          (item) =>
            !item.isAutoGenerated || item.projectId !== projectConfig.projectId
        )
      );
    }
  };

  const handleProjectHourlyRateChange = (projectKey: string, rate: number | null) => {
    if (!rate) return;

    setProjectConfigs((prev) =>
      prev.map((p) => (p.key === projectKey ? { ...p, hourlyRate: rate } : p))
    );

    // Fetch time summary if not already loaded
    const projectConfig = projectConfigs.find((p) => p.key === projectKey);
    if (projectConfig && !projectConfig.timeSummary) {
      const duration = form.getFieldValue("duration") || "1month";
      fetchTimeSummary(projectKey, projectConfig.projectId, duration);
    }
  };

  const handleDurationChange = (duration: string) => {
    form.setFieldsValue({ duration });

    // Refetch time summaries for all projects
    projectConfigs.forEach((projectConfig) => {
      if (projectConfig.hourlyRate > 0) {
        fetchTimeSummary(projectConfig.key, projectConfig.projectId, duration);
      }
    });
  };

  const handleAddLineItem = () => {
    const newKey = `manual-${Date.now()}`;
    setLineItems([
      ...lineItems,
      {
        key: newKey,
        description: "",
        quantity: 1,
        unitPrice: 0,
        isAutoGenerated: false,
      },
    ]);
  };

  const handleRemoveLineItem = (key: string) => {
    const item = lineItems.find((i) => i.key === key);
    if (item?.isAutoGenerated) {
      message.warning(
        "Cannot remove auto-generated items. Clear project to remove all."
      );
      return;
    }
    setLineItems(lineItems.filter((item) => item.key !== key));
  };

  const handleLineItemChange = (
    key: string,
    field: keyof LineItem,
    value: any
  ) => {
    setLineItems(
      lineItems.map((item) =>
        item.key === key ? { ...item, [field]: value } : item
      )
    );
  };

  const calculateSubtotal = () => {
    return lineItems.reduce(
      (sum, item) => sum + (item.quantity || 0) * (item.unitPrice || 0),
      0
    );
  };

  const handleSubmit = async (values: any) => {
    // Validate: must have either line items OR project with hourly rate
    const manualItems = lineItems.filter((item) => !item.isAutoGenerated);

    if (lineItems.length === 0) {
      message.error("Please add at least one line item or add a project");
      return;
    }

    // Validate manual line items
    const invalidItems = manualItems.filter(
      (item) =>
        !item.description || item.quantity <= 0 || item.unitPrice <= 0
    );

    if (invalidItems.length > 0) {
      message.error(
        "Please fill in all manual line items with valid data"
      );
      return;
    }

    setIsLoading(true);
    try {
      const invoiceData: any = {
        duration: values.duration,
        items: manualItems.map((item) => ({
          description: item.description,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
        })),
      };

      // Add optional fields
      if (values.customerId) {
        invoiceData.customerId = values.customerId;
      }

      // Add projects if any configured
      if (projectConfigs.length > 0) {
        invoiceData.projectIds = projectConfigs.map((p) => ({
          projectId: p.projectId,
          hourlyRate: p.hourlyRate,
        }));
      }

      await Api.createInvoice(invoiceData);

      message.success("Invoice created successfully");
      navigate(`/tenants/${slug}/invoices`);
    } catch (error: any) {
      console.error("Failed to create invoice:", error);
      message.error(
        error.response?.data?.message || "Failed to create invoice"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const lineItemColumns = [
    {
      title: "Description",
      dataIndex: "description",
      key: "description",
      width: "40%",
      render: (text: string, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>{text}</Text>
        ) : (
          <TextArea
            value={text}
            onChange={(e) =>
              handleLineItemChange(record.key, "description", e.target.value)
            }
            placeholder="Service or item description"
            autoSize={{ minRows: 1, maxRows: 3 }}
          />
        ),
    },
    {
      title: "Quantity",
      dataIndex: "quantity",
      key: "quantity",
      width: "15%",
      render: (value: number, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>{value} hours</Text>
        ) : (
          <InputNumber
            value={value}
            onChange={(val) =>
              handleLineItemChange(record.key, "quantity", val || 0)
            }
            min={1}
            style={{ width: "100%" }}
          />
        ),
    },
    {
      title: "Unit Price",
      dataIndex: "unitPrice",
      key: "unitPrice",
      width: "20%",
      render: (value: number, record: LineItem) =>
        record.isAutoGenerated ? (
          <Text>${value}/hr</Text>
        ) : (
          <InputNumber
            value={value}
            onChange={(val) =>
              handleLineItemChange(record.key, "unitPrice", val || 0)
            }
            min={0}
            step={0.01}
            formatter={(value) =>
              `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            }
            parser={(value) =>
              Number(value!.replace(/\$\s?|(,*)/g, "")) as 0
            }
            style={{ width: "100%" }}
          />
        ),
    },
    {
      title: "Amount",
      key: "amount",
      width: "20%",
      render: (_: any, record: LineItem) => {
        const amount = (record.quantity || 0) * (record.unitPrice || 0);
        return (
          <Text strong>
            ${amount.toLocaleString("en-US", { minimumFractionDigits: 2 })}
          </Text>
        );
      },
    },
    {
      title: "",
      key: "action",
      width: "5%",
      render: (_: any, record: LineItem) => (
        <Button
          type="text"
          danger
          icon={<DeleteOutlined />}
          onClick={() => handleRemoveLineItem(record.key)}
          disabled={record.isAutoGenerated}
        />
      ),
    },
  ];

  const subtotal = calculateSubtotal();

  // Filter projects by selected customer
  const filteredProjects = selectedCustomerId
    ? projects.filter((p) => p.customerId === selectedCustomerId)
    : projects;

  return (
    <ResponsiveContainer maxWidth="xl">
      <Card
        title={
          <Space>
            <Title level={3} style={{ margin: 0 }}>
              Create New Invoice
            </Title>
          </Space>
        }
      >
        <Form form={form} layout="vertical" onFinish={handleSubmit}>
          <Row gutter={[16, 0]}>
            <Col xs={24} md={12}>
              <Form.Item
                label="Customer"
                name="customerId"
                rules={[
                  { required: true, message: "Please select a customer" },
                ]}
              >
                <Select
                  placeholder="Select a customer"
                  size="large"
                  loading={loadingCustomers}
                  showSearch
                  optionFilterProp="children"
                  onChange={handleCustomerChange}
                  filterOption={(input, option) =>
                    (option?.label ?? "")
                      .toLowerCase()
                      .includes(input.toLowerCase())
                  }
                  options={customers.map((customer) => ({
                    value: customer.id,
                    label: customer.company
                      ? `${customer.name} (${customer.company})`
                      : customer.name,
                  }))}
                />
              </Form.Item>
            </Col>

            <Col xs={24} md={12}>
              <Form.Item
                label="Duration"
                name="duration"
                rules={[{ required: true, message: "Please select duration" }]}
                initialValue="1month"
              >
                <Select size="large" onChange={handleDurationChange}>
                  <Select.Option value="1week">1 Week</Select.Option>
                  <Select.Option value="2weeks">2 Weeks</Select.Option>
                  <Select.Option value="1month">1 Month</Select.Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Divider>
            <Space>
              <ProjectOutlined />
              <Text>Projects (Optional)</Text>
            </Space>
          </Divider>

          {projectConfigs.length > 0 && (
            <Space direction="vertical" style={{ width: "100%", marginBottom: 16 }}>
              {projectConfigs.map((projectConfig) => (
                <Card
                  key={projectConfig.key}
                  size="small"
                  title={
                    <Space>
                      <ProjectOutlined />
                      <Text strong>{projectConfig.projectName}</Text>
                    </Space>
                  }
                  extra={
                    <Button
                      type="text"
                      danger
                      size="small"
                      icon={<DeleteOutlined />}
                      onClick={() => handleRemoveProject(projectConfig.key)}
                    >
                      Remove
                    </Button>
                  }
                >
                  <Row gutter={[16, 16]}>
                    <Col xs={24} md={12}>
                      <Space direction="vertical" style={{ width: "100%" }}>
                        <Text type="secondary">Hourly Rate</Text>
                        <InputNumber
                          value={projectConfig.hourlyRate}
                          placeholder="Enter hourly rate"
                          size="large"
                          min={0.01}
                          step={0.01}
                          style={{ width: "100%" }}
                          onChange={(rate) =>
                            handleProjectHourlyRateChange(projectConfig.key, rate)
                          }
                          formatter={(value) =>
                            `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                          }
                          parser={(value) =>
                            Number(value!.replace(/\$\s?|(,*)/g, "")) as 0
                          }
                        />
                      </Space>
                    </Col>
                    <Col xs={24} md={12}>
                      {projectConfig.timeSummary && (
                        <Spin spinning={projectConfig.loading}>
                          <Space direction="vertical" style={{ width: "100%" }}>
                            <Text type="secondary">Time Summary</Text>
                            <Alert
                              message={
                                <Space direction="vertical" style={{ width: "100%" }}>
                                  {projectConfig.timeSummary.memberBreakdown.map(
                                    (member) => {
                                      const rate =
                                        member.effectiveRate ??
                                        projectConfig.hourlyRate;
                                      return (
                                        <Row
                                          key={member.userId}
                                          justify="space-between"
                                        >
                                          <Col>
                                            <Space direction="vertical" size={0}>
                                              <Text>• {member.userName}:</Text>
                                              {member.effectiveRate && (
                                                <Text
                                                  type="secondary"
                                                  style={{ fontSize: 11 }}
                                                >
                                                  @ ${member.effectiveRate}/hr
                                                  {member.projectSpecificRate &&
                                                    " (override)"}
                                                </Text>
                                              )}
                                            </Space>
                                          </Col>
                                          <Col>
                                            <Space
                                              direction="vertical"
                                              size={0}
                                              align="end"
                                            >
                                              <Text strong>{member.hours}h</Text>
                                              <Text
                                                type="secondary"
                                                style={{ fontSize: 11 }}
                                              >
                                                $
                                                {(member.hours * rate).toFixed(2)}
                                              </Text>
                                            </Space>
                                          </Col>
                                        </Row>
                                      );
                                    }
                                  )}
                                  <Divider style={{ margin: "8px 0" }} />
                                  <Row justify="space-between">
                                    <Col>
                                      <Text strong>Total:</Text>
                                    </Col>
                                    <Col>
                                      <Text strong>
                                        {projectConfig.timeSummary.totalHours}h = $
                                        {projectConfig.timeSummary.memberBreakdown
                                          .reduce((sum, member) => {
                                            const rate =
                                              member.effectiveRate ??
                                              projectConfig.hourlyRate;
                                            return sum + member.hours * rate;
                                          }, 0)
                                          .toLocaleString("en-US", {
                                            minimumFractionDigits: 2,
                                          })}
                                      </Text>
                                    </Col>
                                  </Row>
                                </Space>
                              }
                              type="info"
                            />
                          </Space>
                        </Spin>
                      )}
                    </Col>
                  </Row>
                </Card>
              ))}
            </Space>
          )}

          <Select
            placeholder="Add a project..."
            size="large"
            loading={loadingProjects}
            showSearch
            style={{ width: "100%", marginBottom: 24 }}
            optionFilterProp="children"
            value={null}
            onChange={handleAddProject}
            filterOption={(input, option) =>
              (option?.label ?? "")
                .toLowerCase()
                .includes(input.toLowerCase())
            }
            options={filteredProjects
              .filter(
                (p) => !projectConfigs.some((pc) => pc.projectId === p.id)
              )
              .map((project) => ({
                value: project.id,
                label: project.name,
              }))}
          />

          <Divider>Line Items</Divider>

          <Table
            dataSource={lineItems}
            columns={lineItemColumns}
            pagination={false}
            size="small"
            rowKey="key"
            style={{ marginBottom: 16 }}
            locale={{
              emptyText: "No line items. Add manually or select a project with hourly rate.",
            }}
          />

          <Button
            type="dashed"
            onClick={handleAddLineItem}
            icon={<PlusOutlined />}
            style={{ marginBottom: 24, width: isMobile ? "100%" : "auto" }}
          >
            Add Manual Line Item
          </Button>

          <Divider />

          <Row justify="end" style={{ marginBottom: 24 }}>
            <Col xs={24} md={8}>
              <Space
                direction="vertical"
                style={{ width: "100%" }}
                size="small"
              >
                <Row justify="space-between">
                  <Col>
                    <Text strong>Subtotal:</Text>
                  </Col>
                  <Col>
                    <Text strong style={{ fontSize: 16 }}>
                      $
                      {subtotal.toLocaleString("en-US", {
                        minimumFractionDigits: 2,
                      })}
                    </Text>
                  </Col>
                </Row>
                <Row justify="space-between">
                  <Col>
                    <Text>Tax:</Text>
                  </Col>
                  <Col>
                    <Text>$0.00</Text>
                  </Col>
                </Row>
                <Divider style={{ margin: "8px 0" }} />
                <Row justify="space-between">
                  <Col>
                    <Title level={4} style={{ margin: 0 }}>
                      Total:
                    </Title>
                  </Col>
                  <Col>
                    <Title level={4} style={{ margin: 0 }}>
                      $
                      {subtotal.toLocaleString("en-US", {
                        minimumFractionDigits: 2,
                      })}
                    </Title>
                  </Col>
                </Row>
              </Space>
            </Col>
          </Row>

          <Form.Item>
            <Space
              direction={isMobile ? "vertical" : "horizontal"}
              style={{ width: isMobile ? "100%" : "auto" }}
            >
              <Button
                type="primary"
                htmlType="submit"
                icon={<SaveOutlined />}
                loading={isLoading}
                size="large"
                block={isMobile}
              >
                Create Invoice
              </Button>
              <Button
                icon={<CloseOutlined />}
                onClick={() => navigate(`/tenants/${slug}/invoices`)}
                size="large"
                block={isMobile}
              >
                Cancel
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Card>
    </ResponsiveContainer>
  );
};
